model:
  base_learning_rate: 2.0e-6
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    linear_start: 0.00085
    linear_end: 0.0120
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: "image"
    cond_stage_key: "caption"
    image_size: 64
    channels: 6 # Changed from 4
    cond_stage_trainable: false
    conditioning_key: crossattn
    monitor: val/loss_simple_ema
    scale_factor: 1.0 
    use_ema: False # Setting this to true uses too much VRAM :(
    encode_noise: True
    mean: 0.5
    stdev: 0.5

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        use_checkpoint: False # Changed from True
        use_fp16: False
        image_size: 32 # unused
        in_channels: 6 # Changed from 4
        out_channels: 6 # Changed from 4
        model_channels: 320 
        attention_resolutions: [ 4, 2, 1 ] 
        num_res_blocks: 1 
        channel_mult: [ 1, 1, 4, 4 ] # Original: [1,2,4,4]
        num_head_channels: 64 # need to fix for flash-attn 
        use_spatial_transformer: True 
        use_linear_in_transformer: True 
        transformer_depth: 1 
        context_dim: 1024 
        legacy: False
        use_bcos: True
        bcos_normalize: True
        B: 2
        max_out: 1

    first_stage_config: 
      target: ldm.models.autoencoder.IdentityFirstStage
       # params:
        # embed_dim: 4
        # monitor: val/rec_loss
        # ddconfig:
          # #attn_type: "vanilla-xformers"
          # double_z: true
          # z_channels: 4
          # resolution: 256
          # in_channels: 3
          # out_ch: 3
          # ch: 128
          # ch_mult:
          # - 1
          # - 2
          # - 4
          # - 4
          # num_res_blocks: 2
          # attn_resolutions: []
          # dropout: 0.0
        # lossconfig:
          # target: torch.nn.Identity

    cond_stage_config: 
      target: ldm.models.autoencoder.IdentityFirstStage
      #target: ldm.modules.encoders.modules.FrozenOpenCLIPEmbedder
      #params:
      #  freeze: True
      #  layer: "penultimate"
data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 3
    num_workers: 3
    wrap: false
    train:
      target: ldm.data.personalized.PersonalizedBase
      params:
        n: 100000
        cache: "pbfgp100k.pt"
        positive: True
        cond_stage_config: 
          target: ldm.modules.encoders.modules.FrozenOpenCLIPEmbedder
          params:
            freeze: True
            layer: "penultimate"
    validation:
      target: ldm.data.personalized.PersonalizedBase
      params:
        n: 5
        cache: "val.pt"
        val: True
        positive: True
        cond_stage_config: 
          target: ldm.modules.encoders.modules.FrozenOpenCLIPEmbedder
          params:
            freeze: True
            layer: "penultimate"
lightning:
  modelcheckpoint:
    params:
      every_n_epochs: 3
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 50000
        max_images: 8
        increase_log_steps: False
        rescale: False # set to false if encode_noise and positive are True 
        log_images_kwargs: 
          inpaint: False
  trainer:
    benchmark: True
    max_steps: 1000000
    accumulate_grad_batches: 1
    auto_select_gpus: True
    gpus: "-1"
    logger:
      target: pytorch_lightning.loggers.WandbLogger
      params: 
        project: "SD"
